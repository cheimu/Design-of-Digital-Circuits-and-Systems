
LightsandSwitches.elf:     file format elf32-littlenios2
LightsandSwitches.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000002a4 memsz 0x000002a4 flags r-x
    LOAD off    0x000012c4 vaddr 0x000082c4 paddr 0x000082c8 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000012cc vaddr 0x000082cc paddr 0x000082cc align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000012c8  2**0
                  CONTENTS
  2 .text         0000028c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000082ac  000082ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000082c4  000082c8  000012c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000082cc  000082cc  000012cc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000082d8  000082d8  000012c8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  000012f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000c24  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000006ff  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000007d7  00000000  00000000  0000279b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001b0  00000000  00000000  00002f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000069c  00000000  00000000  00003124  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000153  00000000  00000000  000037c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00003914  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  00003938  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000047f5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000047f8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000047fb  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000047fd  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00004801  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00004805  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00004809  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00004812  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0000481b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00004824  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000048  00000000  00000000  00004836  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00067e15  00000000  00000000  0000487e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
000082ac l    d  .rodata	00000000 .rodata
000082c4 l    d  .rwdata	00000000 .rwdata
000082cc l    d  .bss	00000000 .bss
000082d8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LightsandSwitches_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
00008184 g     F .text	0000002c alt_main
000082c8 g       *ABS*	00000000 __flash_rwdata_start
000081b0 g     F .text	00000038 alt_putstr
000082c4 g     O .rwdata	00000004 jtag_uart
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000082d0 g     O .bss	00000004 alt_argv
000102c4 g       *ABS*	00000000 _gp
00008258 g     F .text	00000038 alt_icache_flush
000082d8 g       *ABS*	00000000 __bss_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
00008240 g     F .text	00000004 alt_dcache_flush_all
000082c8 g       *ABS*	00000000 __ram_rwdata_end
000082c4 g       *ABS*	00000000 __ram_rodata_end
000082d8 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
0000820c g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
00008208 g     F .text	00000004 alt_sys_init
000082c4 g       *ABS*	00000000 __ram_rwdata_start
000082ac g       *ABS*	00000000 __ram_rodata_start
000082d8 g       *ABS*	00000000 __alt_stack_base
000082cc g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000048 main
000082cc g     O .bss	00000004 alt_envp
000082ac g       *ABS*	00000000 __flash_rodata_start
000081e8 g     F .text	00000020 alt_irq_init
000082d4 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
000082c8 g       *ABS*	00000000 _edata
000082d8 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008250 g     F .text	00000008 altera_nios2_qsys_irq_init
0000d000 g       *ABS*	00000000 __alt_data_end
0000801c g       .entry	00000000 _exit
00008290 g     F .text	0000001c strlen
00008244 g     F .text	0000000c alt_icache_flush_all
000080a4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff7d40>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at

0000801c <_exit>:
    801c:	00000000 	call	0 <__reset-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d680b114 	ori	gp,gp,708
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a0b314 	ori	r2,r2,33484

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e0b614 	ori	r3,r3,33496

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7d80>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00080a40 	call	80a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081840 	call	8184 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7d94>

0000805c <main>:
#define SWITCHES (volatile char *) 0x00011090
#define LEDS (volatile char *) 0x000110a0

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    805c:	01000074 	movhi	r4,1
#include "sys/alt_stdio.h"
#define SWITCHES (volatile char *) 0x00011090
#define LEDS (volatile char *) 0x000110a0

int main()
{ 
    8060:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    8064:	2120ab04 	addi	r4,r4,-32084
#include "sys/alt_stdio.h"
#define SWITCHES (volatile char *) 0x00011090
#define LEDS (volatile char *) 0x000110a0

int main()
{ 
    8068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    806c:	00081b00 	call	81b0 <alt_putstr>

  /* Event loop never exits. */
  while (1) {
	  if(*SWITCHES & 0x1) {
    8070:	00800074 	movhi	r2,1
    8074:	01000074 	movhi	r4,1
    8078:	10842404 	addi	r2,r2,4240
    807c:	21042804 	addi	r4,r4,4256
    8080:	10c00003 	ldbu	r3,0(r2)
    8084:	18c0004c 	andi	r3,r3,1
    8088:	18000326 	beq	r3,zero,8098 <main+0x3c>
		  *LEDS = ~(*SWITCHES);
    808c:	10c00003 	ldbu	r3,0(r2)
    8090:	00c6303a 	nor	r3,zero,r3
    8094:	00000106 	br	809c <main+0x40>
	  } else {
		  *LEDS = *SWITCHES;
    8098:	10c00003 	ldbu	r3,0(r2)
    809c:	20c00005 	stb	r3,0(r4)
    80a0:	003ff706 	br	8080 <_gp+0xffff7dbc>

000080a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    80a4:	deffff04 	addi	sp,sp,-4
    80a8:	01000074 	movhi	r4,1
    80ac:	01400074 	movhi	r5,1
    80b0:	dfc00015 	stw	ra,0(sp)
    80b4:	2120b104 	addi	r4,r4,-32060
    80b8:	2960b204 	addi	r5,r5,-32056

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    80bc:	2140061e 	bne	r4,r5,80d8 <alt_load+0x34>
    80c0:	01000074 	movhi	r4,1
    80c4:	01400074 	movhi	r5,1
    80c8:	21200804 	addi	r4,r4,-32736
    80cc:	29600804 	addi	r5,r5,-32736
    80d0:	2140121e 	bne	r4,r5,811c <alt_load+0x78>
    80d4:	00000b06 	br	8104 <alt_load+0x60>
    80d8:	00c00074 	movhi	r3,1
    80dc:	18e0b204 	addi	r3,r3,-32056
    80e0:	1907c83a 	sub	r3,r3,r4
    80e4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    80e8:	10fff526 	beq	r2,r3,80c0 <_gp+0xffff7dfc>
    {
      *to++ = *from++;
    80ec:	114f883a 	add	r7,r2,r5
    80f0:	39c00017 	ldw	r7,0(r7)
    80f4:	110d883a 	add	r6,r2,r4
    80f8:	10800104 	addi	r2,r2,4
    80fc:	31c00015 	stw	r7,0(r6)
    8100:	003ff906 	br	80e8 <_gp+0xffff7e24>
    8104:	01000074 	movhi	r4,1
    8108:	01400074 	movhi	r5,1
    810c:	2120ab04 	addi	r4,r4,-32084
    8110:	2960ab04 	addi	r5,r5,-32084

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8114:	2140101e 	bne	r4,r5,8158 <alt_load+0xb4>
    8118:	00000b06 	br	8148 <alt_load+0xa4>
    811c:	00c00074 	movhi	r3,1
    8120:	18e00804 	addi	r3,r3,-32736
    8124:	1907c83a 	sub	r3,r3,r4
    8128:	0005883a 	mov	r2,zero
  {
    while( to != end )
    812c:	10fff526 	beq	r2,r3,8104 <_gp+0xffff7e40>
    {
      *to++ = *from++;
    8130:	114f883a 	add	r7,r2,r5
    8134:	39c00017 	ldw	r7,0(r7)
    8138:	110d883a 	add	r6,r2,r4
    813c:	10800104 	addi	r2,r2,4
    8140:	31c00015 	stw	r7,0(r6)
    8144:	003ff906 	br	812c <_gp+0xffff7e68>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8148:	00082400 	call	8240 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    814c:	dfc00017 	ldw	ra,0(sp)
    8150:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8154:	00082441 	jmpi	8244 <alt_icache_flush_all>
    8158:	00c00074 	movhi	r3,1
    815c:	18e0b104 	addi	r3,r3,-32060
    8160:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8164:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8168:	18bff726 	beq	r3,r2,8148 <_gp+0xffff7e84>
    {
      *to++ = *from++;
    816c:	114f883a 	add	r7,r2,r5
    8170:	39c00017 	ldw	r7,0(r7)
    8174:	110d883a 	add	r6,r2,r4
    8178:	10800104 	addi	r2,r2,4
    817c:	31c00015 	stw	r7,0(r6)
    8180:	003ff906 	br	8168 <_gp+0xffff7ea4>

00008184 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8184:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8188:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    818c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8190:	00081e80 	call	81e8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8194:	00082080 	call	8208 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8198:	d1a00217 	ldw	r6,-32760(gp)
    819c:	d1600317 	ldw	r5,-32756(gp)
    81a0:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    81a4:	dfc00017 	ldw	ra,0(sp)
    81a8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81ac:	000805c1 	jmpi	805c <main>

000081b0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    81b0:	defffe04 	addi	sp,sp,-8
    81b4:	dc000015 	stw	r16,0(sp)
    81b8:	dfc00115 	stw	ra,4(sp)
    81bc:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    81c0:	00082900 	call	8290 <strlen>
    81c4:	01000074 	movhi	r4,1
    81c8:	000f883a 	mov	r7,zero
    81cc:	100d883a 	mov	r6,r2
    81d0:	800b883a 	mov	r5,r16
    81d4:	2120b104 	addi	r4,r4,-32060
#else
    return fputs(str, stdout);
#endif
#endif
}
    81d8:	dfc00117 	ldw	ra,4(sp)
    81dc:	dc000017 	ldw	r16,0(sp)
    81e0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    81e4:	000820c1 	jmpi	820c <altera_avalon_jtag_uart_write>

000081e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    81e8:	deffff04 	addi	sp,sp,-4
    81ec:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    81f0:	00082500 	call	8250 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    81f4:	00800044 	movi	r2,1
    81f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    81fc:	dfc00017 	ldw	ra,0(sp)
    8200:	dec00104 	addi	sp,sp,4
    8204:	f800283a 	ret

00008208 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8208:	f800283a 	ret

0000820c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    820c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8210:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8214:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8218:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    821c:	2980072e 	bgeu	r5,r6,823c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8220:	38c00037 	ldwio	r3,0(r7)
    8224:	18ffffec 	andhi	r3,r3,65535
    8228:	183ffc26 	beq	r3,zero,821c <_gp+0xffff7f58>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    822c:	28c00007 	ldb	r3,0(r5)
    8230:	20c00035 	stwio	r3,0(r4)
    8234:	29400044 	addi	r5,r5,1
    8238:	003ff806 	br	821c <_gp+0xffff7f58>

  return count;
}
    823c:	f800283a 	ret

00008240 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8240:	f800283a 	ret

00008244 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8244:	01420004 	movi	r5,2048
    8248:	0009883a 	mov	r4,zero
    824c:	00082581 	jmpi	8258 <alt_icache_flush>

00008250 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8250:	000170fa 	wrctl	ienable,zero
    8254:	f800283a 	ret

00008258 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    8258:	00820004 	movi	r2,2048
    825c:	1140012e 	bgeu	r2,r5,8264 <alt_icache_flush+0xc>
    8260:	100b883a 	mov	r5,r2
    8264:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8268:	2005883a 	mov	r2,r4
    826c:	1140032e 	bgeu	r2,r5,827c <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    8270:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8274:	10800804 	addi	r2,r2,32
    8278:	003ffc06 	br	826c <_gp+0xffff7fa8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    827c:	210007cc 	andi	r4,r4,31
    8280:	20000126 	beq	r4,zero,8288 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    8284:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    8288:	0000203a 	flushp
    828c:	f800283a 	ret

00008290 <strlen>:
    8290:	2005883a 	mov	r2,r4
    8294:	10c00007 	ldb	r3,0(r2)
    8298:	18000226 	beq	r3,zero,82a4 <strlen+0x14>
    829c:	10800044 	addi	r2,r2,1
    82a0:	003ffc06 	br	8294 <_gp+0xffff7fd0>
    82a4:	1105c83a 	sub	r2,r2,r4
    82a8:	f800283a 	ret

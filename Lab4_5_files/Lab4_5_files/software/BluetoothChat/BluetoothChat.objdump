
BluetoothChat.elf:     file format elf32-littlenios2
BluetoothChat.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000055c memsz 0x0000055c flags r-x
    LOAD off    0x0000157c vaddr 0x0000857c paddr 0x00008580 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001584 vaddr 0x00008584 paddr 0x00008584 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001580  2**0
                  CONTENTS
  2 .text         00000518  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  00008538  00008538  00001538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  0000857c  00008580  0000157c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00008584  00008584  00001584  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00008590  00008590  00001580  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001c8  00000000  00000000  000015a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000f17  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000008e3  00000000  00000000  00002687  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000094a  00000000  00000000  00002f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000025c  00000000  00000000  000038b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000734  00000000  00000000  00003b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000035d  00000000  00000000  00004244  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000045a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a0  00000000  00000000  000045c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005515  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00005518  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000551b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000551c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000551d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00005521  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00005525  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00005529  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00005532  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0000553b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00005544  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000048  00000000  00000000  00005556  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00067e15  00000000  00000000  0000559e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008538 l    d  .rodata	00000000 .rodata
0000857c l    d  .rwdata	00000000 .rwdata
00008584 l    d  .bss	00000000 .bss
00008590 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../BluetoothChat_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
00008258 g     F .text	0000002c alt_main
00008580 g       *ABS*	00000000 __flash_rwdata_start
0000805c g     F .text	0000008c send_char
0000843c g     F .text	00000038 alt_putstr
0000857c g     O .rwdata	00000004 jtag_uart
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008588 g     O .bss	00000004 alt_argv
0001057c g       *ABS*	00000000 _gp
000084e4 g     F .text	00000038 alt_icache_flush
00008590 g       *ABS*	00000000 __bss_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000084cc g     F .text	00000004 alt_dcache_flush_all
00008580 g       *ABS*	00000000 __ram_rwdata_end
0000857c g       *ABS*	00000000 __ram_rodata_end
00008590 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008498 g     F .text	00000034 altera_avalon_jtag_uart_write
00008284 g     F .text	00000170 alt_printf
00008020 g     F .text	0000003c _start
00008494 g     F .text	00000004 alt_sys_init
0000857c g       *ABS*	00000000 __ram_rwdata_start
00008538 g       *ABS*	00000000 __ram_rodata_start
00008590 g       *ABS*	00000000 __alt_stack_base
00008584 g       *ABS*	00000000 __bss_start
000080e8 g     F .text	00000090 main
00008584 g     O .bss	00000004 alt_envp
00008538 g       *ABS*	00000000 __flash_rodata_start
00008474 g     F .text	00000020 alt_irq_init
0000858c g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008580 g       *ABS*	00000000 _edata
00008590 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000084dc g     F .text	00000008 altera_nios2_qsys_irq_init
0000d000 g       *ABS*	00000000 __alt_data_end
0000801c g       .entry	00000000 _exit
0000851c g     F .text	0000001c strlen
000083f4 g     F .text	00000048 alt_putchar
000084d0 g     F .text	0000000c alt_icache_flush_all
00008178 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff7a88>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at

0000801c <_exit>:
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6815f14 	ori	gp,gp,1404
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a16114 	ori	r2,r2,34180

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e16414 	ori	r3,r3,34192

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7ac8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00081780 	call	8178 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00082580 	call	8258 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7adc>

0000805c <send_char>:

	//writing IOWR_ALTERA_AVALON_PIO_DATA(targetAddress, aValue);
	//reading: aValue = IORD_ALTERA_AVALON_PIO_DATA(sourceAddress);


void send_char(char c) {
    805c:	defffe04 	addi	sp,sp,-8
    8060:	df000115 	stw	fp,4(sp)
    8064:	df000104 	addi	fp,sp,4
    8068:	2005883a 	mov	r2,r4
    806c:	e0bfff05 	stb	r2,-4(fp)
	 //write a character to the parallel port
	 	IOWR_ALTERA_AVALON_PIO_DATA(PARALLEL_OUT, c);
    8070:	e0ffff07 	ldb	r3,-4(fp)
    8074:	00800074 	movhi	r2,1
    8078:	10842004 	addi	r2,r2,4224
    807c:	10c00035 	stwio	r3,0(r2)

	 	//load buffer
	 	IOWR_ALTERA_AVALON_PIO_DATA(PARALLEL_LOAD, 1);
    8080:	00c00044 	movi	r3,1
    8084:	00800074 	movhi	r2,1
    8088:	10841804 	addi	r2,r2,4192
    808c:	10c00035 	stwio	r3,0(r2)

	 	//transmit data
	 	IOWR_ALTERA_AVALON_PIO_DATA(TRANSMIT_ENABLE, 1);
    8090:	00c00044 	movi	r3,1
    8094:	00800074 	movhi	r2,1
    8098:	10841404 	addi	r2,r2,4176
    809c:	10c00035 	stwio	r3,0(r2)

	 	//wait till character sent, turn off transmit
	 	while(!IORD_ALTERA_AVALON_PIO_DATA(CHAR_SENT));
    80a0:	0001883a 	nop
    80a4:	00800074 	movhi	r2,1
    80a8:	10840c04 	addi	r2,r2,4144
    80ac:	10800037 	ldwio	r2,0(r2)
    80b0:	103ffc26 	beq	r2,zero,80a4 <_gp+0xffff7b28>
	 	IOWR_ALTERA_AVALON_PIO_DATA(TRANSMIT_ENABLE, 0);
    80b4:	0007883a 	mov	r3,zero
    80b8:	00800074 	movhi	r2,1
    80bc:	10841404 	addi	r2,r2,4176
    80c0:	10c00035 	stwio	r3,0(r2)
	 	IOWR_ALTERA_AVALON_PIO_DATA(PARALLEL_LOAD, 0);
    80c4:	0007883a 	mov	r3,zero
    80c8:	00800074 	movhi	r2,1
    80cc:	10841804 	addi	r2,r2,4192
    80d0:	10c00035 	stwio	r3,0(r2)
}
    80d4:	0001883a 	nop
    80d8:	e037883a 	mov	sp,fp
    80dc:	df000017 	ldw	fp,0(sp)
    80e0:	dec00104 	addi	sp,sp,4
    80e4:	f800283a 	ret

000080e8 <main>:

int main()
{ 
    80e8:	defffb04 	addi	sp,sp,-20
    80ec:	dfc00415 	stw	ra,16(sp)
    80f0:	df000315 	stw	fp,12(sp)
    80f4:	df000304 	addi	fp,sp,12
	alt_putstr("Welcome to Bluetooth Chat!\n");
    80f8:	01000074 	movhi	r4,1
    80fc:	21214e04 	addi	r4,r4,-31432
    8100:	000843c0 	call	843c <alt_putstr>

	int last_received = 0;
    8104:	e03ffd15 	stw	zero,-12(fp)
	int curr_received = 0;
    8108:	e03ffe15 	stw	zero,-8(fp)
	alt_putstr("Wait for incoming messages.\n\n");
    810c:	01000074 	movhi	r4,1
    8110:	21215504 	addi	r4,r4,-31404
    8114:	000843c0 	call	843c <alt_putstr>
	alt_putstr(">");
    8118:	01000074 	movhi	r4,1
    811c:	21215d04 	addi	r4,r4,-31372
    8120:	000843c0 	call	843c <alt_putstr>

	while(1) {
		curr_received = IORD_ALTERA_AVALON_PIO_DATA(CHAR_RECEIVED);
    8124:	00800074 	movhi	r2,1
    8128:	10841004 	addi	r2,r2,4160
    812c:	10800037 	ldwio	r2,0(r2)
    8130:	e0bffe15 	stw	r2,-8(fp)
		if(!last_received && curr_received) {
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	10000c1e 	bne	r2,zero,816c <main+0x84>
    813c:	e0bffe17 	ldw	r2,-8(fp)
    8140:	10000a26 	beq	r2,zero,816c <main+0x84>
			char b = IORD_ALTERA_AVALON_PIO_DATA(PARALLEL_IN) >> 1;
    8144:	00800074 	movhi	r2,1
    8148:	10841c04 	addi	r2,r2,4208
    814c:	10800037 	ldwio	r2,0(r2)
    8150:	1005d07a 	srai	r2,r2,1
    8154:	e0bfff05 	stb	r2,-4(fp)
			alt_printf("%c",b);
    8158:	e0bfff07 	ldb	r2,-4(fp)
    815c:	100b883a 	mov	r5,r2
    8160:	01000074 	movhi	r4,1
    8164:	21215e04 	addi	r4,r4,-31368
    8168:	00082840 	call	8284 <alt_printf>
		}
		last_received = curr_received;
    816c:	e0bffe17 	ldw	r2,-8(fp)
    8170:	e0bffd15 	stw	r2,-12(fp)
	}
    8174:	003feb06 	br	8124 <_gp+0xffff7ba8>

00008178 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8178:	deffff04 	addi	sp,sp,-4
    817c:	01000074 	movhi	r4,1
    8180:	01400074 	movhi	r5,1
    8184:	dfc00015 	stw	ra,0(sp)
    8188:	21215f04 	addi	r4,r4,-31364
    818c:	29616004 	addi	r5,r5,-31360

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8190:	2140061e 	bne	r4,r5,81ac <alt_load+0x34>
    8194:	01000074 	movhi	r4,1
    8198:	01400074 	movhi	r5,1
    819c:	21200804 	addi	r4,r4,-32736
    81a0:	29600804 	addi	r5,r5,-32736
    81a4:	2140121e 	bne	r4,r5,81f0 <alt_load+0x78>
    81a8:	00000b06 	br	81d8 <alt_load+0x60>
    81ac:	00c00074 	movhi	r3,1
    81b0:	18e16004 	addi	r3,r3,-31360
    81b4:	1907c83a 	sub	r3,r3,r4
    81b8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    81bc:	10fff526 	beq	r2,r3,8194 <_gp+0xffff7c18>
    {
      *to++ = *from++;
    81c0:	114f883a 	add	r7,r2,r5
    81c4:	39c00017 	ldw	r7,0(r7)
    81c8:	110d883a 	add	r6,r2,r4
    81cc:	10800104 	addi	r2,r2,4
    81d0:	31c00015 	stw	r7,0(r6)
    81d4:	003ff906 	br	81bc <_gp+0xffff7c40>
    81d8:	01000074 	movhi	r4,1
    81dc:	01400074 	movhi	r5,1
    81e0:	21214e04 	addi	r4,r4,-31432
    81e4:	29614e04 	addi	r5,r5,-31432

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    81e8:	2140101e 	bne	r4,r5,822c <alt_load+0xb4>
    81ec:	00000b06 	br	821c <alt_load+0xa4>
    81f0:	00c00074 	movhi	r3,1
    81f4:	18e00804 	addi	r3,r3,-32736
    81f8:	1907c83a 	sub	r3,r3,r4
    81fc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8200:	10fff526 	beq	r2,r3,81d8 <_gp+0xffff7c5c>
    {
      *to++ = *from++;
    8204:	114f883a 	add	r7,r2,r5
    8208:	39c00017 	ldw	r7,0(r7)
    820c:	110d883a 	add	r6,r2,r4
    8210:	10800104 	addi	r2,r2,4
    8214:	31c00015 	stw	r7,0(r6)
    8218:	003ff906 	br	8200 <_gp+0xffff7c84>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    821c:	00084cc0 	call	84cc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8220:	dfc00017 	ldw	ra,0(sp)
    8224:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8228:	00084d01 	jmpi	84d0 <alt_icache_flush_all>
    822c:	00c00074 	movhi	r3,1
    8230:	18e15f04 	addi	r3,r3,-31364
    8234:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8238:	0005883a 	mov	r2,zero
  {
    while( to != end )
    823c:	18bff726 	beq	r3,r2,821c <_gp+0xffff7ca0>
    {
      *to++ = *from++;
    8240:	114f883a 	add	r7,r2,r5
    8244:	39c00017 	ldw	r7,0(r7)
    8248:	110d883a 	add	r6,r2,r4
    824c:	10800104 	addi	r2,r2,4
    8250:	31c00015 	stw	r7,0(r6)
    8254:	003ff906 	br	823c <_gp+0xffff7cc0>

00008258 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8258:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    825c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8260:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8264:	00084740 	call	8474 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8268:	00084940 	call	8494 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    826c:	d1a00217 	ldw	r6,-32760(gp)
    8270:	d1600317 	ldw	r5,-32756(gp)
    8274:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8278:	dfc00017 	ldw	ra,0(sp)
    827c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8280:	00080e81 	jmpi	80e8 <main>

00008284 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    8284:	defff204 	addi	sp,sp,-56
    8288:	2005883a 	mov	r2,r4
    828c:	dfc00a15 	stw	ra,40(sp)
    8290:	df000915 	stw	fp,36(sp)
    8294:	ddc00815 	stw	r23,32(sp)
    8298:	dd800715 	stw	r22,28(sp)
    829c:	dd400615 	stw	r21,24(sp)
    82a0:	dd000515 	stw	r20,20(sp)
    82a4:	dcc00415 	stw	r19,16(sp)
    82a8:	dc800315 	stw	r18,12(sp)
    82ac:	dc400215 	stw	r17,8(sp)
    82b0:	dc000115 	stw	r16,4(sp)
    82b4:	d9400b15 	stw	r5,44(sp)
    82b8:	d9800c15 	stw	r6,48(sp)
    82bc:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    82c0:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
    82c4:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    82c8:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    82cc:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    82d0:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    82d4:	11000007 	ldb	r4,0(r2)
    82d8:	20003a26 	beq	r4,zero,83c4 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    82dc:	24000226 	beq	r4,r16,82e8 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    82e0:	14400044 	addi	r17,r2,1
    82e4:	00001406 	br	8338 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    82e8:	14400084 	addi	r17,r2,2
    82ec:	10800047 	ldb	r2,1(r2)
    82f0:	10003426 	beq	r2,zero,83c4 <alt_printf+0x140>
            {
                if (c == '%')
    82f4:	1400021e 	bne	r2,r16,8300 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    82f8:	8009883a 	mov	r4,r16
    82fc:	00000e06 	br	8338 <alt_printf+0xb4>
                } 
                else if (c == 'c')
    8300:	1480051e 	bne	r2,r18,8318 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    8304:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    8308:	ad800104 	addi	r22,r21,4
    830c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    8310:	00083f40 	call	83f4 <alt_putchar>
    8314:	00002906 	br	83bc <alt_printf+0x138>
                }
                else if (c == 'x')
    8318:	14c0201e 	bne	r2,r19,839c <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    831c:	adc00017 	ldw	r23,0(r21)
    8320:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    8324:	b8000326 	beq	r23,zero,8334 <alt_printf+0xb0>
    8328:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    832c:	00c003c4 	movi	r3,15
    8330:	00000306 	br	8340 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    8334:	01000c04 	movi	r4,48
    8338:	00083f40 	call	83f4 <alt_putchar>
                        continue;
    833c:	00001f06 	br	83bc <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    8340:	1d84983a 	sll	r2,r3,r22
    8344:	15c4703a 	and	r2,r2,r23
    8348:	1000021e 	bne	r2,zero,8354 <alt_printf+0xd0>
                        digit_shift -= 4;
    834c:	b5bfff04 	addi	r22,r22,-4
    8350:	003ffb06 	br	8340 <_gp+0xffff7dc4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    8354:	070003c4 	movi	fp,15
                        if (digit <= 9)
    8358:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    835c:	b0001716 	blt	r22,zero,83bc <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    8360:	e588983a 	sll	r4,fp,r22
    8364:	25c8703a 	and	r4,r4,r23
    8368:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
    836c:	19000236 	bltu	r3,r4,8378 <alt_printf+0xf4>
                            c = '0' + digit;
    8370:	21000c04 	addi	r4,r4,48
    8374:	00000106 	br	837c <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
    8378:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
    837c:	21003fcc 	andi	r4,r4,255
    8380:	2100201c 	xori	r4,r4,128
    8384:	213fe004 	addi	r4,r4,-128
    8388:	d8c00015 	stw	r3,0(sp)
    838c:	00083f40 	call	83f4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    8390:	b5bfff04 	addi	r22,r22,-4
    8394:	d8c00017 	ldw	r3,0(sp)
    8398:	003ff006 	br	835c <_gp+0xffff7de0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    839c:	1500071e 	bne	r2,r20,83bc <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    83a0:	ad800017 	ldw	r22,0(r21)
    83a4:	ad400104 	addi	r21,r21,4

                    while(*s)
    83a8:	b1000007 	ldb	r4,0(r22)
    83ac:	20000326 	beq	r4,zero,83bc <alt_printf+0x138>
                      alt_putchar(*s++);
    83b0:	b5800044 	addi	r22,r22,1
    83b4:	00083f40 	call	83f4 <alt_putchar>
    83b8:	003ffb06 	br	83a8 <_gp+0xffff7e2c>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    83bc:	8805883a 	mov	r2,r17
    83c0:	003fc406 	br	82d4 <_gp+0xffff7d58>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    83c4:	dfc00a17 	ldw	ra,40(sp)
    83c8:	df000917 	ldw	fp,36(sp)
    83cc:	ddc00817 	ldw	r23,32(sp)
    83d0:	dd800717 	ldw	r22,28(sp)
    83d4:	dd400617 	ldw	r21,24(sp)
    83d8:	dd000517 	ldw	r20,20(sp)
    83dc:	dcc00417 	ldw	r19,16(sp)
    83e0:	dc800317 	ldw	r18,12(sp)
    83e4:	dc400217 	ldw	r17,8(sp)
    83e8:	dc000117 	ldw	r16,4(sp)
    83ec:	dec00e04 	addi	sp,sp,56
    83f0:	f800283a 	ret

000083f4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    83f4:	defffd04 	addi	sp,sp,-12
    83f8:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    83fc:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8400:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    8404:	01000074 	movhi	r4,1
    8408:	000f883a 	mov	r7,zero
    840c:	01800044 	movi	r6,1
    8410:	d80b883a 	mov	r5,sp
    8414:	21215f04 	addi	r4,r4,-31364
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8418:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    841c:	00084980 	call	8498 <altera_avalon_jtag_uart_write>
    8420:	00ffffc4 	movi	r3,-1
    8424:	10c00126 	beq	r2,r3,842c <alt_putchar+0x38>
        return -1;
    }
    return c;
    8428:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    842c:	dfc00217 	ldw	ra,8(sp)
    8430:	dc000117 	ldw	r16,4(sp)
    8434:	dec00304 	addi	sp,sp,12
    8438:	f800283a 	ret

0000843c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    843c:	defffe04 	addi	sp,sp,-8
    8440:	dc000015 	stw	r16,0(sp)
    8444:	dfc00115 	stw	ra,4(sp)
    8448:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    844c:	000851c0 	call	851c <strlen>
    8450:	01000074 	movhi	r4,1
    8454:	000f883a 	mov	r7,zero
    8458:	100d883a 	mov	r6,r2
    845c:	800b883a 	mov	r5,r16
    8460:	21215f04 	addi	r4,r4,-31364
#else
    return fputs(str, stdout);
#endif
#endif
}
    8464:	dfc00117 	ldw	ra,4(sp)
    8468:	dc000017 	ldw	r16,0(sp)
    846c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8470:	00084981 	jmpi	8498 <altera_avalon_jtag_uart_write>

00008474 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8474:	deffff04 	addi	sp,sp,-4
    8478:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    847c:	00084dc0 	call	84dc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8480:	00800044 	movi	r2,1
    8484:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8488:	dfc00017 	ldw	ra,0(sp)
    848c:	dec00104 	addi	sp,sp,4
    8490:	f800283a 	ret

00008494 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8494:	f800283a 	ret

00008498 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8498:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    849c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    84a0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    84a4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    84a8:	2980072e 	bgeu	r5,r6,84c8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    84ac:	38c00037 	ldwio	r3,0(r7)
    84b0:	18ffffec 	andhi	r3,r3,65535
    84b4:	183ffc26 	beq	r3,zero,84a8 <_gp+0xffff7f2c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    84b8:	28c00007 	ldb	r3,0(r5)
    84bc:	20c00035 	stwio	r3,0(r4)
    84c0:	29400044 	addi	r5,r5,1
    84c4:	003ff806 	br	84a8 <_gp+0xffff7f2c>

  return count;
}
    84c8:	f800283a 	ret

000084cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    84cc:	f800283a 	ret

000084d0 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    84d0:	01420004 	movi	r5,2048
    84d4:	0009883a 	mov	r4,zero
    84d8:	00084e41 	jmpi	84e4 <alt_icache_flush>

000084dc <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    84dc:	000170fa 	wrctl	ienable,zero
    84e0:	f800283a 	ret

000084e4 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    84e4:	00820004 	movi	r2,2048
    84e8:	1140012e 	bgeu	r2,r5,84f0 <alt_icache_flush+0xc>
    84ec:	100b883a 	mov	r5,r2
    84f0:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    84f4:	2005883a 	mov	r2,r4
    84f8:	1140032e 	bgeu	r2,r5,8508 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    84fc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8500:	10800804 	addi	r2,r2,32
    8504:	003ffc06 	br	84f8 <_gp+0xffff7f7c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    8508:	210007cc 	andi	r4,r4,31
    850c:	20000126 	beq	r4,zero,8514 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    8510:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    8514:	0000203a 	flushp
    8518:	f800283a 	ret

0000851c <strlen>:
    851c:	2005883a 	mov	r2,r4
    8520:	10c00007 	ldb	r3,0(r2)
    8524:	18000226 	beq	r3,zero,8530 <strlen+0x14>
    8528:	10800044 	addi	r2,r2,1
    852c:	003ffc06 	br	8520 <_gp+0xffff7fa4>
    8530:	1105c83a 	sub	r2,r2,r4
    8534:	f800283a 	ret
